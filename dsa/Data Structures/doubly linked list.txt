class node:
    def __init__(self,data,next=None):
        self.next=next
        self.data=data
        self.prev=None
class dll:
    def __init__(self):
        self.head=None

    def push(self,new_data):
        new_node=node(new_data)
        new_node.next=self.head
        if self.head is not None:
            self.head.prev=new_node
        self.head=new_node

    def insertAfter(self,prev_node,new_data):
        if prev_node is None:
            print("the given previous node cannot be null")
            return
        new_node=node(new_data)
        new_node.next=prev_node.next
        prev_node.next=new_node
        new_node.prev=prev_node
        if new_node.next is not None:
            new_node.next.prev=new_node


    def append(self,new_data):
        new_node=node(new_data)
        new_node.next=None
        if self.head is None:
            new_node.prev=None
            self.head=new_node
            return
        last=self.head
        while(last.next is not None):
            last=last.next
        last.next=new_node
        new_node.prev=last
        return


    
    def printlist(self,node):
        print("\ntraversal in forward direcction")
        while (node is not None):
            print("%d"%(node.data))
            last=node
            node=node.next

        print("\nTraversal in the reverse direction")
        while(last is not None):
            print("%d"%(last.data))
            last=last.prev


            
            
l=dll()
l.append(6)
l.push(7)
l.push(1)
l.append(4)
l.insertAfter(l.head.next,8)
l.printlist(l.head)
